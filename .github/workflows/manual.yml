name: Destroy AWS Infrastructure and Docker Resources

on:
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  destroy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: terraform init
      working-directory: ./Eks-terraform

    - name: Terraform apply
      run: terraform apply -auto-approve
      working-directory: ./Eks-terraform

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ env.AWS_REGION }}

    - name: Remove Docker images from ECR
      run: |
        IMAGE_TAGS=$(aws ecr list-images --repository-name medusa-backend --query 'imageIds[*].imageTag' --output text --region $AWS_REGION)
        if [ -n "$IMAGE_TAGS" ]; then
          for tag in $IMAGE_TAGS; do
            aws ecr batch-delete-image \
              --repository-name medusa-backend \
              --image-ids imageTag=$tag \
              --region $AWS_REGION
          done
        else
          echo "No images found to delete."
        fi

    - name: Remove Docker containers
      run: |
        CONTAINERS=$(docker ps -aq)
        if [ -n "$CONTAINERS" ]; then
          docker rm -f $CONTAINERS
        else
          echo "No containers to remove."
        fi

    - name: Remove Docker volumes
      run: |
        VOLUMES=$(docker volume ls -q)
        if [ -n "$VOLUMES" ]; then
          docker volume rm $VOLUMES
        else
          echo "No volumes to remove."
        fi
